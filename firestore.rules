
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedOut() {
      return request.auth == null;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function getRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isAdmin() {
      return isSignedIn() && getRole() == 'admin';
    }
    
    function isFaculty() {
        return isSignedIn() && getRole() == 'faculty';
    }

    function isStudent() {
        return isSignedIn() && getRole() == 'student';
    }
    
    match /users/{userId} {
      allow read: if isSignedIn() && (isAdmin() || isFaculty() || request.auth.uid == userId);
      // Allow list for admins, faculty, and for the specific pre-registration check.
      allow list: if (isAdmin() || isFaculty()) || 
                  (isSignedOut() && (request.query.keys.hasOnly(['email']) || request.query.keys.hasOnly(['usn'])));
      allow create: if isSignedOut(); // Allow user creation during registration
      allow update: if isSignedIn() && (isAdmin() || isFaculty() || request.auth.uid == userId);
      allow delete: if isAdmin();
    }
    
    match /branches/{branchId} {
        allow read: if true; // Allow anyone to read branches for registration
        allow write: if isAdmin();
    }
    
    match /timetables/{timetableId} {
        allow read: if isSignedIn() && (isAdmin() || isFaculty() || isStudent());
        allow write: if isAdmin() || isFaculty();
    }
  }
}
