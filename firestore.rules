rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function isRole(role) {
      return isAuth() && get(/databases/{database}/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isOneOfRoles(roles) {
      return isAuth() && get(/databases/{database}/documents/users/$(request.auth.uid)).data.role in roles;
    }

    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    // Collection: users
    match /users/{userId} {
      allow read: if isAuth();
      allow create: if !isAuth(); // For registration
      allow update: if isOwner(userId) || isOneOfRoles(['admin']);
      allow delete: if isOneOfRoles(['admin']);
    }

    // Collection: branches
    match /branches/{branchId} {
      allow read: if true; // Publicly readable for registration
      allow write: if isOneOfRoles(['admin']);
    }

    // Collection: assignments
    match /assignments/{assignmentId} {
      allow read: if isAuth();
      allow write: if isOneOfRoles(['admin', 'faculty']);
    }
    
    // Collection: timetables
    match /timetables/{timetableId} {
      allow read: if isAuth();
      allow write: if isOneOfRoles(['admin', 'faculty']);
    }
    
    // Collection: attendance
    match /attendance/{attendanceId} {
      allow read: if isAuth() && 
                    (isOneOfRoles(['admin', 'faculty']) || 
                     (resource.data.branch == get(/databases/{database}/documents/users/$(request.auth.uid)).data.branch &&
                      resource.data.semester == get(/databases/{database}/documents/users/$(request.auth.uid)).data.semester));
      allow write: if isOneOfRoles(['admin', 'faculty']);
    }

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
