
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check user role
    function isRole(role) {
      return get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isRoleIn(roles) {
      return get(/databases/(default)/documents/users/$(request.auth.uid)).data.role in roles;
    }

    // Users can read their own data, admins can read/write any user data.
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
      allow list, create, delete: if isRole('admin');
    }
    
    // Branches can be read by anyone (for registration), but only written by admins.
    match /branches/{branchId} {
      allow read: if true;
      allow write: if isRole('admin');
    }

    // Timetables can be read by students/faculty, written by admins/faculty
    match /timetables/{timetableId} {
      allow read: if request.auth != null;
      allow write: if isRoleIn(['admin', 'faculty']);
    }

    // Assignments can be read by any authenticated user, but only created/edited/deleted by faculty or admin
    match /assignments/{assignmentId} {
        allow read: if request.auth != null;
        allow write: if isRoleIn(['admin', 'faculty']);
    }

    // Attendance can be written by faculty/admin. Students can only read records for their class.
    match /attendance/{recordId} {
      allow read: if request.auth != null &&
                  (isRoleIn(['admin', 'faculty']) ||
                   (isRole('student') &&
                    resource.data.branch == get(/databases/(default)/documents/users/$(request.auth.uid)).data.branch &&
                    resource.data.semester == get(/databases/(default)/documents/users/$(request.auth.uid)).data.semester));
      allow write: if isRoleIn(['admin', 'faculty']);
    }
  }
}
