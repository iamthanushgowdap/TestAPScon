
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function getRequestingUserData() {
      return getUserData(request.auth.uid);
    }

    function isAdmin() {
      return isAuth() && getRequestingUserData().role == 'admin';
    }

    function isFaculty() {
      return isAuth() && getRequestingUserData().role == 'faculty';
    }
    
    function isStudent() {
      return isAuth() && getRequestingUserData().role == 'student';
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // --- Collection Rules ---

    // Users Collection
    match /users/{userId} {
      // Create: Anyone can create their own user document (for registration).
      allow create: if isAuth() && isOwner(userId);
      
      // Read: Users can read their own profile. Admins can read any profile. 
      // Faculty can read profiles of students in their assigned branches.
      allow get: if isAuth() && (isOwner(userId) || isAdmin() || 
                 (isFaculty() && getUserData(userId).role == 'student' && getUserData(userId).branch in getRequestingUserData().branch));
      
      // List: Admins/Faculty can list users for management. Other requests are denied to prevent data scraping.
      // This rule is intentionally restrictive. Specific queries can be allowed if needed.
      allow list: if isAdmin() || isFaculty();

      // Write: Users can update their own profile. Admins can update any profile.
      // Faculty can update student profiles within their branch (for approvals).
      allow update: if (isAuth() && isOwner(userId)) || isAdmin() || 
                    (isFaculty() && getUserData(userId).role == 'student' && getUserData(userId).branch in getRequestingUserData().branch);

      // Delete: Only admins can delete users.
      allow delete: if isAdmin();
    }

    // Branches Collection
    match /branches/{branchId} {
      // Read: Any authenticated user can read branches.
      allow read: if isAuth();
      // Write: Only admins can create or modify branches.
      allow write: if isAdmin();
    }
    
    // Timetables Collection
    match /timetables/{timetableId} {
      // Read: Any authenticated user can read any timetable.
      // (Permissions are controlled by knowing the timetableId, which is branch_semester).
      allow read: if isAuth();
      
      // Write: Admins and Faculty can create, update, and delete timetables.
      allow write: if isAdmin() || isFaculty();
    }

    // Assignments Collection
    match /assignments/{assignmentId} {
        // Read: Any authenticated user can read assignments.
        // Client-side code is responsible for filtering which assignments to show.
        allow read: if isAuth();

        // Write: Only Admins and Faculty can create, update, or delete assignments.
        allow write: if isAdmin() || isFaculty();
    }
  }
}
